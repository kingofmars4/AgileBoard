// <auto-generated />
using System;
using AgileBoard.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AgileBoard.Infrastructure.Migrations
{
    [DbContext(typeof(AgileBoardDbContext))]
    [Migration("20250902212543_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AgileBoard.Domain.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("AgileBoard.Domain.Entities.Sprint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Sprints");
                });

            modelBuilder.Entity("AgileBoard.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("AgileBoard.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AgileBoard.Domain.Entities.WorkItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("SprintId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SprintId");

                    b.ToTable("WorkItems");
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.Property<int>("ParticipantsId")
                        .HasColumnType("int");

                    b.Property<int>("ParticipatingProjectsId")
                        .HasColumnType("int");

                    b.HasKey("ParticipantsId", "ParticipatingProjectsId");

                    b.HasIndex("ParticipatingProjectsId");

                    b.ToTable("ProjectParticipants", (string)null);
                });

            modelBuilder.Entity("TagWorkItem", b =>
                {
                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.Property<int>("WorkItemsId")
                        .HasColumnType("int");

                    b.HasKey("TagsId", "WorkItemsId");

                    b.HasIndex("WorkItemsId");

                    b.ToTable("WorkItemTags", (string)null);
                });

            modelBuilder.Entity("UserWorkItem", b =>
                {
                    b.Property<int>("AssignedUsersId")
                        .HasColumnType("int");

                    b.Property<int>("AssignedWorkItemsId")
                        .HasColumnType("int");

                    b.HasKey("AssignedUsersId", "AssignedWorkItemsId");

                    b.HasIndex("AssignedWorkItemsId");

                    b.ToTable("WorkItemAssignedUsers", (string)null);
                });

            modelBuilder.Entity("AgileBoard.Domain.Entities.Project", b =>
                {
                    b.HasOne("AgileBoard.Domain.Entities.User", "Owner")
                        .WithMany("OwnedProjects")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("AgileBoard.Domain.Entities.Sprint", b =>
                {
                    b.HasOne("AgileBoard.Domain.Entities.Project", "Project")
                        .WithMany("Sprints")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("AgileBoard.Domain.Entities.WorkItem", b =>
                {
                    b.HasOne("AgileBoard.Domain.Entities.Project", "Project")
                        .WithMany("WorkItems")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgileBoard.Domain.Entities.Sprint", "Sprint")
                        .WithMany("WorkItems")
                        .HasForeignKey("SprintId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Project");

                    b.Navigation("Sprint");
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.HasOne("AgileBoard.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgileBoard.Domain.Entities.Project", null)
                        .WithMany()
                        .HasForeignKey("ParticipatingProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TagWorkItem", b =>
                {
                    b.HasOne("AgileBoard.Domain.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgileBoard.Domain.Entities.WorkItem", null)
                        .WithMany()
                        .HasForeignKey("WorkItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserWorkItem", b =>
                {
                    b.HasOne("AgileBoard.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("AssignedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgileBoard.Domain.Entities.WorkItem", null)
                        .WithMany()
                        .HasForeignKey("AssignedWorkItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AgileBoard.Domain.Entities.Project", b =>
                {
                    b.Navigation("Sprints");

                    b.Navigation("WorkItems");
                });

            modelBuilder.Entity("AgileBoard.Domain.Entities.Sprint", b =>
                {
                    b.Navigation("WorkItems");
                });

            modelBuilder.Entity("AgileBoard.Domain.Entities.User", b =>
                {
                    b.Navigation("OwnedProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
